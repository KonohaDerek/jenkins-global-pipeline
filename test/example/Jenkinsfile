env.buildColor = ''
env.sonarQubeUrl = 'https://sonarqube-demo.example.com'
env.targetUrl = 'https://demo.example.com'
env.namespace='DevOps'
env.project = 'Jenkins Global pipeline'
env.GIT_BRANCH = "${env.gitlabTargetBranch? env.gitlabTargetBranch: 'master'}"
env.GIT_URL = 'gitlab.howdesign.com.tw/devops/jenkins-global-pipeline.git'
env.VERSION_TAG = "0.0.${BUILD_NUMBER}-beta"
env.IMAGE_TAG = 'testing'
env.IMAGE_NAME = 'image/jenkins-global-pipeline'
env.credentialsId = 'bss_jenkins_gitlab_access'

node {
  try {
    // start()
    pipeline()
    // success()
    // version() 
  } catch (e) {
    println "Error: ${e}"
    println "Error message: ${e.message}"
    // failureWithAI(e)
    throw(e)
  }
}

def pipeline() {
  stage('ENV') {
    sh 'env'
  }
  stage('Build Error') {
    try{
      clientImage = docker.build("demo", ".") >> a.txt
      println "clientImage: ${clientImage}"
    } catch (e) {
        withCredentials([
            usernamePassword(credentialsId: 'jenkins-console-pat', usernameVariable: 'JENKINS_CONSOLE_USER', passwordVariable: 'JENKINS_CONSOLE_TOKEN')
        ]) {
             echo "Docker 映像檔建置失敗，嘗試擷取錯誤資訊..."
             sleep 30
            // 擷取詳細的錯誤資訊
            def errorLog = sh(
                script: """
                curl "${env.BUILD_URL}consoleText --user ${JENKINS_CONSOLE_USER}:${JENKINS_CONSOLE_TOKEN}" 
                """,
                returnStdout: true
            ).trim()

            error """Docker 建置失敗：
            錯誤資訊：
            ${errorLog}
            """
            throw new Exception(errorLog)
         }
    }
  }
}