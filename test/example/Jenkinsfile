env.buildColor = ''
env.sonarQubeUrl = 'https://sonarqube-demo.example.com'
env.targetUrl = 'https://demo.example.com'
env.namespace='DevOps'
env.project = 'Jenkins Global pipeline'
env.GIT_BRANCH = "${env.gitlabTargetBranch? env.gitlabTargetBranch: 'master'}"
env.GIT_URL = 'gitlab.howdesign.com.tw/devops/jenkins-global-pipeline.git'
env.VERSION_TAG = "0.0.${BUILD_NUMBER}-beta"
env.IMAGE_TAG = 'testing'
env.IMAGE_NAME = 'image/jenkins-global-pipeline'
env.credentialsId = 'bss_jenkins_gitlab_access'

node {
  try {
    // start()
    pipeline()
    // success()
    // version() 
  } catch (e) {
    println "Error: ${e}"
    println "Error message: ${e.message}"
    // failureWithAI(e)
    throw(e)
  }
}

def pipeline() {
  stage('ENV') {
    sh 'env'
  }
  stage('Build Error') {
    try{
      clientImage = docker.build("demo", ".") >> a.txt
      println "clientImage: ${clientImage}"
    } catch (e) {
        withCredentials([
            usernamePassword(credentialsId: 'jenkins-console-pat', usernameVariable: 'JENKINS_CONSOLE_USER', passwordVariable: 'JENKINS_CONSOLE_TOKEN')
        ]) {
            echo "Docker 映像檔建置失敗，嘗試擷取錯誤資訊..."
            sleep 10
            def errorLog = ""
            // 讀取控製臺日誌到變數中
            def consoleLog = sh(
                script: "curl -s --user ${JENKINS_CONSOLE_USER}:${JENKINS_CONSOLE_TOKEN} ${env.BUILD_URL}consoleText",
                returnStdout: true
            ).trim()
            
           // 定義正則錶達式來匹配從 'docker build' 到 '[Pipeline] }' 的內容
            def pattern =  ~/docker build(.*?)$Pipeline$\s+\}/ // 使用 's' 修飾符以匹配跨行內容
            def matcher = (consoleLog =~ pattern)

            // 檢查是否找到了匹配項
            if (matcher) {
                def extractedLog = matcher[0] // 獲取第一個匹配的結果
                echo "Extracted Log Content: ${extractedLog}"
                // 如果需要，可以將提取的內容寫入文件
                writeFile file: 'extracted_console.log', text: extractedLog
            } else {
                echo "No matching content found between 'docker build' and '[Pipeline] }'."
            }

            // 這裏可以進一步處理 consoleLog，或者將其存儲到文件
            writeFile file: 'console.log', text: consoleLog // 如果想將內容寫入文件

            error """Docker 建置失敗：
            錯誤資訊：
            ${errorLog}
            """
            throw new Exception(errorLog)
         }
    }
  }
}